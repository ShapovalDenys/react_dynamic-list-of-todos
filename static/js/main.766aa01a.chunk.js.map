{"version":3,"sources":["API.ts","User.tsx","Todo.tsx","TodoList.tsx","App.tsx","index.tsx"],"names":["API_URL","User","user","className","name","Todo","todo","classNames","completed","title","TodoList","todos","map","key","id","App","useState","isLoading","setIsLoadind","isLoaded","setIsLoaded","setPreparedTodos","loadGoods","a","Promise","all","fetch","then","response","json","todosFromServer","usersFromServer","preparedTodos","find","userId","disabled","type","onClick","prevState","sort","b","localeCompare","role","ReactDOM","render","document","getElementById"],"mappings":"iSAAMA,G,MAAU,wC,iBCiBDC,EAXe,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC/B,OACE,oCACE,wBAAIC,UAAU,SACZ,uBAAGA,UAAU,WAAb,UACCD,EAAKE,QCWCC,EAde,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC/B,OACE,oCACE,yBAAKH,UAAWI,IAAW,OAAQ,aAAc,OAAQ,KAAM,CAAE,aAAcD,EAAKE,UAAW,aAAcF,EAAKE,aAChH,yBAAKL,UAAU,eAAeG,EAAKG,OACnC,yBAAKN,UAAU,aACb,wBAAIA,UAAU,cAAcG,EAAKE,UAAY,gDAA2B,qDACxE,uBAAGL,UAAU,aAAY,kBAAC,EAAD,CAAMD,KAAMI,EAAKJ,YCErCQ,EAVmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChC,6BACE,wBAAIR,UAAU,QACXQ,EAAMC,KAAI,SAACN,GAAD,OACT,kBAAC,EAAD,CAAMA,KAAMA,EAAMO,IAAKP,EAAKQ,WCkFrBC,EAxFH,WAAO,IAAD,EACkBC,oBAAS,GAD3B,mBACTC,EADS,KACEC,EADF,OAEgBF,oBAAS,GAFzB,mBAETG,EAFS,KAECC,EAFD,OAGkBJ,mBAAS,IAH3B,mBAGTL,EAHS,KAGFU,EAHE,KAKVC,EAAS,uCAAG,oCAAAC,EAAA,6DAChBL,GAAa,GADG,SAGiCM,QAAQC,IACvD,CJXGC,MAAM,GAAD,OAAI1B,EAAJ,WACT2B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAItBH,MAAM,GAAD,OAAI1B,EAAJ,WACT2B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YICX,mCAGTC,EAHS,KAGQC,EAHR,KAOVC,EAAgBF,EAAgBlB,KAAI,SAACN,GAAD,mBAAC,eACtCA,GADqC,IAExCJ,KAAM6B,EAAgBE,MAAK,SAAC/B,GAAD,OAAqBA,EAAKY,KAAOR,EAAK4B,eAGnEb,EAAiBW,GACjBd,GAAa,GACbE,GAAY,GAdI,4CAAH,qDAgCf,OACE,oCACE,wBAAIjB,UAAU,aAAd,yBACA,yBAAKA,UAAU,YACXgB,GACA,4BACEhB,UAAU,kBACVgC,SAAUlB,EACVmB,KAAK,SACLC,QAASf,GAERL,EAAY,aAAe,QAI/BE,GAEH,oCACE,4BACEhB,UAAU,6BACViC,KAAK,SACLC,QApCY,WAClBhB,GAAiB,SAAAiB,GAAS,OAAI,YAAIA,GAC/BC,MAAK,SAAChB,EAAciB,GAAf,OAAiCjB,EAAEd,MAAMgC,cAAcD,EAAE/B,eA+B7D,iBAQA,4BACEN,UAAU,6BACViC,KAAK,SACLC,QAvCa,WACnBhB,GAAiB,SAAAiB,GAAS,OAAI,YAAIA,GAC/BC,MAAK,SAAChB,EAAciB,GAAf,OAAkCA,EAAEhC,WAAae,EAAEf,kBAkCvD,kBAQA,4BACEL,UAAU,uBACViC,KAAK,SACLC,QA1CW,WACjBhB,GAAiB,SAAAiB,GAAS,OAAI,YAAIA,GAC/BC,MAAK,SAAChB,EAAciB,GAAf,OAAiCjB,EAAErB,KAAKE,KAAKqC,cAAcD,EAAEtC,KAAKE,cAqCtE,kBAUDa,GACI,yBAAKd,UAAU,8BAA8BuC,KAAK,WACvD,kBAAC,EAAD,CAAU/B,MAAOA,MCpFvBgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.766aa01a.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getTODOs = () => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => {\n  return fetch(`${API_URL}/users`)\n    .then(response => response.json());\n};\n","import React from 'react';\n\ntype Props = {\n  user: UserProps;\n};\n\nconst User: React.FC<Props> = ({ user }) => {\n  return (\n    <>\n      <h3 className=\"names\">\n        <p className=\"article\">Name: </p>\n        {user.name}\n      </h3>\n    </>\n  );\n};\n\nexport default User;\n","import React from 'react';\nimport classNames from 'classnames';\nimport User from './User';\n\ntype Props = {\n  todo: TodoProps;\n};\n\nconst Todo: React.FC<Props> = ({ todo }) => {\n  return (\n    <>\n      <div className={classNames('card', 'text-white', 'mb-3', 'gg', { 'bg-success': todo.completed, 'bg-danger': !todo.completed })}>\n        <div className=\"card-header\">{todo.title}</div>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{todo.completed ? <p>Status: completed</p> : <p>Status: not completed</p>}</h5>\n          <p className=\"card-text\"><User user={todo.user} /></p>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\ntype Props = {\n  todos: TodoProps[];\n};\n\nconst TodoList: React.FC<Props> = ({ todos }) => (\n  <div>\n    <ul className=\"list\">\n      {todos.map((todo: TodoProps) => (\n        <Todo todo={todo} key={todo.id} />\n      ))}\n    </ul>\n  </div>\n);\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getTODOs, getUsers } from './API';\nimport TodoList from './TodoList';\n\nconst App = () => {\n  const [isLoading, setIsLoadind] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [todos, setPreparedTodos] = useState([]);\n\n  const loadGoods = async () => {\n    setIsLoadind(true);\n\n    const [todosFromServer, usersFromServer] = await Promise.all(\n      [getTODOs(), getUsers()],\n    );\n\n    const preparedTodos = todosFromServer.map((todo: TodoProps) => ({\n      ...todo,\n      user: usersFromServer.find((user: UserProps) => user.id === todo.userId),\n    }));\n\n    setPreparedTodos(preparedTodos);\n    setIsLoadind(false);\n    setIsLoaded(true);\n  };\n\n  const sortByTitle = () => {\n    setPreparedTodos(prevState => [...prevState]\n      .sort((a: TodoProps, b: TodoProps) => (a.title.localeCompare(b.title))));\n  };\n\n  const sortByStatus = () => {\n    setPreparedTodos(prevState => [...prevState]\n      .sort((a: TodoProps, b: TodoProps) => (+b.completed - +a.completed)));\n  };\n\n  const sortByName = () => {\n    setPreparedTodos(prevState => [...prevState]\n      .sort((a: TodoProps, b: TodoProps) => (a.user.name.localeCompare(b.user.name))));\n  };\n\n  return (\n    <>\n      <h1 className=\"display-5\">Dynamic list of TODOs</h1>\n      <div className=\"buttons\">\n        {!isLoaded && (\n          <button\n            className=\"btn btn-primary\"\n            disabled={isLoading}\n            type=\"button\"\n            onClick={loadGoods}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        )}\n\n        {isLoaded\n    && (\n      <>\n        <button\n          className=\"btn btn-outline-primary mr\"\n          type=\"button\"\n          onClick={sortByTitle}\n        >\n          Sort by Title\n        </button>\n\n        <button\n          className=\"btn btn-outline-success mr\"\n          type=\"button\"\n          onClick={sortByStatus}\n        >\n          Sort by Status\n        </button>\n\n        <button\n          className=\"btn btn-outline-info\"\n          type=\"button\"\n          onClick={sortByName}\n        >\n          Sort by Name\n        </button>\n      </>\n    )}\n      </div>\n      {isLoading\n        && <div className=\"spinner-border text-primary\" role=\"status\" />}\n      <TodoList todos={todos} />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}